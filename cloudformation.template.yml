AWSTemplateFormatVersion: "2010-09-09"
Description: Product Service (node-reference)
Parameters:
  Image:
    Type: String
    Description: Docker image to run
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Id of the VPC
    Default: vpc-868750e3
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of subnet Ids to run in
Resources:
  ProductsTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  LogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 30
  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties: {}
  TaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
      ManagedPolicyArns:
        #Fix this this is horrible of course
        - "arn:aws:iam::aws:policy/AdministratorAccess"
  TaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties: 
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt TaskRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: ProductService
          Cpu: 256
          Memory: 512
          Environment:
            - Name: PRODUCTS_TABLE_NAME
              Value: !Ref ProductsTable
          PortMappings:
            - ContainerPort: 3000
          Essential: true
          Image: !Ref Image
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "ProductService"
  Service: 
    Type: AWS::ECS::Service
    # DependsOn: ListenerRule
    Properties: 
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 1
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers: 
        - ContainerName: ProductService
          ContainerPort: 3000
          TargetGroupArn: !Ref TargetGroup
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Ref SubnetIds
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: !Ref SubnetIds
      VpcId: !Ref VpcId
  LBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      Protocol: HTTP
      Port: 80
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

#  ListenerRule:
#    Type: AWS::ElasticLoadBalancingV2::ListenerRule
#    DependsOn: LBListener
#    Properties:
#      Actions:
#      - Type: forward
#        TargetGroupArn: !Ref TargetGroup
#      Conditions:
#      - Field: path-pattern
#        Values: ["*"]
#      ListenerArn: !Ref LBListener
#      Priority: 1